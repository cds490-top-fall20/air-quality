suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(janitor))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(janitor))
#### importing dataset
```{r}
dataset = clean_names(read_csv("sota_2020.csv"))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(janitor))
dataset = clean_names(read_csv("sota_2020.csv"))
View(dataset)
dataset %>%
group_by(state) %>%
ggplot() +
geom_bar(mapping=aes(x=total_population))
View(dataset)
dataset %>%
group_by(state) %>%
ggplot() +
geom_bar(mapping=aes(x=sum(total_population)))
dataset %>%
group_by(state) %>%
ggplot() +
geom_bar(mapping=aes(x=sumtotal_population))
dataset %>%
group_by(state) %>%
ggplot() +
geom_bar(mapping=aes(x=total_population))
dataset %>%
ggplot() +
geom_bar(mapping=aes(x=total_population))
dataset = clean_names(read_csv("sota_2020.csv"))
dataset %>%
ggplot() +
geom_bar(mapping=aes(x=total_population))
dataset %>%
ggplot(dataset) +
geom_bar(mapping=aes(x=total_population))
ggplot(dataset) +
geom_bar(mapping=aes(x=total_population))
dataset %>%
ggplot(dataset) +
geom_bar(mapping=aes(x=state,y=total_population))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(janitor))
dataset = clean_names(read_csv("sota_2020.csv"))
dataset %>%
ggplot(dataset) +
geom_bar(mapping=aes(x=state,y=total_population))
dataset %>%
ggplot(dataset) +
geom_bar(mapping=aes(x=state,y=total_population))
dataset %>%
ggplot() +
geom_bar(mapping=aes(x=state,y=total_population))
ggplot(dataset) +
geom_bar(mapping=aes(x=state,y=total_population))
ggplot(dataset) +
geom_bar(mapping=aes(y=total_population))
ggplot(dataset) +
geom_bar(mapping=aes(x=county,y=total_population))
ggplot(dataset) +
stat_count(mapping=aes(x=county,y=total_population))
View(dataset)
dataset %>%
group_by(state) %>%
summarize(
`state population` = sum(total_population)
)
shiny::runApp('E:/personalproject/datascience/airquality/eda_sota_2020/shiny_sota_2020v1')
runApp('E:/personalproject/datascience/airquality/eda_sota_2020/shiny_sota_2020v1')
suppressPackageStartupMessages(library(RColorBrewer))
install.packages("RColorBrewere")
suppressPackageStartupMessages(library(RColorBrewer))
install.packages("RColorBrewer")
runApp('E:/personalproject/datascience/airquality/eda_sota_2020/shiny_sota_2020v1')
fillColor = ~pal_under18(map$under_18),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7) %>%
fitBounds(~min(map$longitude),min(map$latitude),
~max(map$longitude),max(map$latitude)) %>%
addMarkers(lng = map$longitude, lat = map$latitude,
clusterOptions = markerClusterOptions(map$under_18),
group = "Schools (Top 100)") %>%
##########################################
# under_18
##########################################
addLayersControl(
runApp('E:/personalproject/datascience/airquality/eda_sota_2020/shiny_sota_2020v1')
pal_under18 <- colorBin("Oranges", domain=map$under_18,bins=bins_under18)
runApp('E:/personalproject/datascience/airquality/eda_sota_2020/shiny_sota_2020v1')
setwd("E:/personalproject/datascience/airquality/eda_sota_2020/data")
runApp('E:/personalproject/datascience/airquality/eda_sota_2020/shiny_sota_2020v1')
setwd("E:/personalproject/datascience/airquality/eda_sota_2020/shiny_sota_2020v1")
runApp()
setwd("E:/personalproject/datascience/airquality/eda_sota_2020/shiny_sota_2020v1")
runApp()
# total population
bins_population <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
# importing dataset
map = clean_names(read_csv("map.csv"))
test <- cut(map$total_population,g=3)
suppressPackageStartupMessages(library(Hmisc))
runApp()
test <- cut(map$total_population,g=3)
hist(map$total_population)
barplot(map$total_population)
test <- bins(map$total_population,target.bins=6)
suppressPackageStartupMessages(library(binr))
test <- bins(map$total_population,target.bins=6)
test <- bins(map$total_population,target.bins=6,minpts = min(map$total_population))
hisct(map$total_population,6)
suppressPackageStartupMessages(library(pracma))
hisct(map$total_population,6)
histc(map$total_population,6)
cut(map$total_population,breaks=6,labels=FALSE)
# total population
bins_population <- cut(map$total_population,breaks=6,labels=FALSE)
runApp()
summary(map$total_population)
runApp()
summary(map$under_18)
runApp()
View(map)
summary(map$x65_over)
install.packages('rbin')
suppressPackageStartupMessages(library(rbin))
bins.getvals(bins(map,target.bins = 6, max.breaks = NA))
bins.getvals(bins(map$total_population,target.bins = 6, max.breaks = NA))
bins.getvals(bins(map$total_population,target.bins = 6, max.breaks = NA,exact.groups = TRUE))
summary(map$total_population)
runApp()
plot(cut(map$total_population,6))
install.packages('HistogramTools')
library(HistogramTools)
SubsetHistogram(his(map$total_population),minbreak = 2,maxbreak = 6)
SubsetHistogram(hist(map$total_population),minbreak = 2,maxbreak = 6)
runApp()
# 65 over
pal_65over <- colorBin('YlOrRd', domain = map$x65_over, 6, pretty = TRUE)
runApp()
View(map)
runApp()
###########################################################################
# BINS
###########################################################################
pal_pop <- colorBin('BuPu', domain = map$total_population, bins = 9, pretty = FALSE)
pal_under18 <- colorBin('YlGn', domain = map$under_18, bins = 9, pretty = FALSE)
# import libraries
suppressPackageStartupMessages(library(shiny))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(leaflet))
suppressPackageStartupMessages(library(janitor))
suppressPackageStartupMessages(library(geojson))
suppressPackageStartupMessages(library(geojsonio))
suppressPackageStartupMessages(library(RColorBrewer))
suppressPackageStartupMessages(library(binr))
# importing dataset
map = clean_names(read_csv('map.csv'))
states = geojsonio::geojson_read('tempgeo.json', what = 'sp')
###########################################################################
# BINS
###########################################################################
pal_pop <- colorBin('BuPu', domain = map$total_population, bins = 9, pretty = FALSE)
pal_under18 <- colorBin('YlGn', domain = map$under_18, bins = 9, pretty = FALSE)
pal_65over <- colorBin('YlOrRd', domain = map$x65_over, bins = 9, pretty = FALSE)
pal_pedasthma <- colorBin('PiYg', domain = map$pediatric_asthma_sufferers, bins = 9, pretty = FALSE)
View(pal_pedasthma)
pal_adlasthma <- colorBin('BrBg', domain = map$adult_asthma_sufferers, bins = 9, pretty = FALSE)
pal_copd <- colorBin('Greys', domain = map$copd_sufferers, bins = 9, pretty = FALSE)
pal_lngcancer <- colorBin('Dirt', domain = map$lung_cancer_sufferers, bins = 9, pretty = FALSE)
pal_hrtdisease <- colorBin('Teal', domain = map$heart_disease, bins = 9, pretty = FALSE)
pal_smoked <- colorBin('Blues', domain = map$ever_smoked, bins = 9, pretty = FALSE)
pal_poverty <- colorBin('PuRd', domain = map$poverty, bins = 9, pretty = FALSE)
pal_poc <- colorBin('Reds', domain = map$people_of_color, bins = 9, pretty = FALSE)
runApp()
View(map)
unique(map$orange_ozone_days)
runApp()
unique(map$red_ozone_days)
unique(map$purple_ozone_days)
runApp()
unique(map$purple_ozone_days)
sum(unique(map$purple_ozone_days))
count(unique(map$purple_ozone_days))
runApp()
unique(map$wgt_avg_ozone_days)
runApp()
unique(map$ozone_grade)
runApp()
unique(map$orange_ozone_days)
runApp()
unique(map$orange_pollutant_days)
runApp()
unique(map$red_pollutant_days)
runApp()
View(map)
unique(map$purple_pollutant_days)
runApp()
unique(map$maroon_pollutant_days)
View(map)
unique(map$wgt_avg_pollutant_days)
unique(map$pollutant_grade)
unique(map$annual_pass_fail)
runApp()
View(map)
runApp()
A <- rbind(c(400,7),c(-230,7))
b <- cbind(c(2800,0))
invA <- solve(A)
invA
# 2.8 What is the R expression using matrix operations to comput
#     invA*b?
sol <- invA*b
sol
# importing libraries
suppressPackageStartupMessages(library(tidyverse))
invA <- solve(A)
invA
# 2.8 What is the R expression using matrix operations to comput
#     invA*b?
sol <- invA*b
A <- rbind(c(400,7),c(-230,7))
b <- cbind(c(2800,0))
invA <- solve(A)
invA
A <- rbind(c(400/7,200/7),c(1,1))
A
A <- rbind(c(400/7,1),c(200/7,1))
b <- cbind(c(400,0))
A
A <- rbind(c(400/7,1),c(-230/7,1))
b <- cbind(c(400,0))
A
b
invA <- solve(A)
invA
# 2.8 What is the R expression using matrix operations to comput
#     invA*b?
sol <- invA*b
b
a
A
b
solve(A)*b
# 1.1 Create R Frames
student <- data.frame('id' = c('123','245',387),
'major' = c('Data Science','Pre Med','Public Health'),
'GPA' = c(3.8,3.2,3.4))
housing <- data.frame('id' = c('123','245','387'),
'dorm' = c('N','Y','Y'),
'in_state' = c('Y','Y','N'))
combined <- merge(student,housing,by='id')
# 1.1 Create R Frames
student <- data.frame('id' = c('123','245','387'),
'major' = c('Data Science','Pre Med','Public Health'),
'GPA' = c(3.8,3.2,3.4))
housing <- data.frame('id' = c('123','245','387'),
'dorm' = c('N','Y','Y'),
'in_state' = c('Y','Y','N'))
combined <- merge(student,housing,by='id')
View(combined)
fulldata <- merge(student,housing,by='id')
View(combined)
# 1.2 select major and in_state
combined %>% select(major,in_state)
fibonacci(10)
fibonacci <- function(n) {
if (n <= 0) {
return(n)
}
else {
return(fibonacci(n-1) + fibonacci(n-2))
}
fibonacci(10)
if (n <= 0) {
return(n)
}
fibonacci <- function(n) {
if (n <= 0) {
return(n)
}
else {
return(fibonacci(n-1) + fibonacci(n-2))
}
for(i in 0:(n-1)){
print(fibonacci(i))
}
fibonacci(10)
# check if the number of terms is valid
if(nterms <= 0) {
print("Plese enter a positive integer")
} else {
print("Fibonacci sequence:")
for(i in 0:(nterms-1)) {
print(recurse_fibonacci(i))
}
recurse_fibonacci <- function(n) {
if(n <= 1) {
return(n)
} else {
return(recurse_fibonacci(n-1) + recurse_fibonacci(n-2))
}
recurse_fibonacci(10)
recurse_fibonacci()
fibonacci <- function(n) {
if (n <= 1) {
return(n)
}
else {
return(fibonacci(n-1) + fibonacci(n-2))
}
for(i in 0:(n-1)){
print(fibonacci(i))
}
fibonacci(10)
else {
print(fibonacci(n-1) + fibonacci(n-2))
}
fibonacci <- function(n) {
if (n <= 1) {
print(n)
}
else {
print(fibonacci(n-1) + fibonacci(n-2))
}
fibonacci(10)
fibonacci <- function(n) {
if (n <= 1) {
return(n)
}
else {
return(fibonacci(n-1) + fibonacci(n-2))
}
fibonacci(10)
printf = function(s,...){
cat(paste0(sprintf(s,...)),'\n')
}
printf <- function(s,...){
cat(paste0(sprintf(s,...)),'\n')
}
fibonacci <- function(n) {
if (n <= 1) {
printf(n)
}
else {
printf(fibonacci(n-1) + fibonacci(n-2))
}
fibonacci(10)
printf <- function(s,n){
cat(paste0(sprintf(s,n)),'\n')
}
fibonacci <- function(n) {
if (n <= 1) {
printf(n)
}
else {
printf(fibonacci(n-1) + fibonacci(n-2))
}
fibonacci(10)
printf <- function(s,n){
cat(paste0(sprintf(s,n)),'\n')
}
printf = function(s, ...) cat(paste0(sprintf(s, ...)), '\n')
fibonacci <- function(n) {
if (n <= 1) {
printf(n)
}
else {
printf(fibonacci(n-1) + fibonacci(n-2))
}
fibonacci(10)
printf = function(s, stuff) cat(paste0(sprintf(s, stuff)), '\n')
fibonacci <- function(n) {
if (n <= 1) {
printf(n)
}
else {
printf(fibonacci(n-1) + fibonacci(n-2))
}
fibonacci(10)
fibonacci <- function(n) {
if (n <= 1) {
print(n)
}
else {
print(fibonacci(n-1) + fibonacci(n-2))
}
fibonacci(10)
fibonacci <- function(n) {
if (n <= 1) {
return(n)
}
else {
return(fibonacci(n-1) + fibonacci(n-2))
}
fibonacci(10)
fibonacci <- function(n) {
if (n <= 1) {
return(n)
}
else {
return(fibonacci(n-1) + fibonacci(n-2))
}
for(i in 0:n) {
print(fibonacci(i))
}
fibonacci(10)
suppressPackageStartupMessages(library(MASS))
crab.data <- MASS::crabs
View(crab.data)
crab.data <- crab.data %>%
mutate(
wl.ratio = CW/CL
)
# 3.2 subset dataframes
crab.bm <- crab.data %>% filter(sp == 'B', sex == 'M')
View(crab.bm)
# 3.2 subset dataframes
crab.bm <- crab.data %>% filter(sp == 'B', sex == 'M')
crab.bf <- crab.data %>% filter(sp == 'B', sex == 'F')
crab.om <- crab.data %>% filter(sp == 'O', sex == 'M')
crab.of <- crab.data %>% filter(sp == 'O', sex == 'F')
View(crab.bf)
View(crab.data)
View(crab.of)
View(crab.om)
# 3.3 create a figure
ggplot() +
geom_boxplot(data = crab.bm, mapping = aex(x = wl.ratio))
# 3.3 create a figure
ggplot() +
geom_boxplot(data = crab.bm, mapping = aex(x = wl.ratio))
View(crab.bm)
# 3.3 create a figure
ggplot() +
geom_boxplot(data = crab.bm, mapping = aes(x = wl.ratio))
# 3.3 create a figure
ggplot() +
geom_boxplot(data = crab.bm, mapping = aes(y = wl.ratio))
# 3.3 create a figure
ggplot() +
geom_boxplot(data = crab.bm, mapping = aes(y = wl.ratio)) +
geom_boxplot(data = crab.bf, mapping = aes(y = wl.ratio))
# 3.3 create a figure
boxplot(crab.bf$wl.ratio,
crab.bm$wl.ratio,
crab.of$wl.ratio,
crab.om$wl.ratio)
title('Crab Width-Length')
# 3.3 create a figure
boxplot(crab.bf$wl.ratio,
crab.bm$wl.ratio,
crab.of$wl.ratio,
crab.om$wl.ratio,
names = c('BF','BM','OF','OM'))
title('Crab Width-Length')
